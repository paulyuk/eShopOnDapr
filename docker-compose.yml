version: '3.4'

services:

  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "8080:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  maildev:
    image: maildev/maildev:latest

  rabbitmq:
    image: rabbitmq:3-management-alpine
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 5s
      retries: 10

  seq:
    image: datalust/seq:latest

  # Use the Azure SQL Edge version so we can also run on Apple Sillicon (thanks @ChristianWeyer)
  sqldata:
    image: mcr.microsoft.com/azure-sql-edge

  zipkin:
    image: openzipkin/zipkin-slim:latest

  basket-api:
    image: ${REGISTRY:-eshopdapr}/basket.api:${TAG:-latest}
    restart: always
    build:
      context: .
      dockerfile: src/Services/Basket/Basket.API/Dockerfile
    depends_on:
      - identity-api

  basket-api-dapr:
    image: "ghcr.io/dapr/dapr:1.12.3"
    restart: always
    command:
      - "/daprd"
      - "-app-id"
      - "basket-api"
      - "-app-port"
      - "80"
      - "-resources-path"
      - "/components"
      - "-config"
      - "/configuration/eshop-config.yaml"
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/configuration"
      - "./data:/data"
    depends_on:
      rabbitmq: 
        condition: service_healthy

  blazor-client:
    image: ${REGISTRY:-eshopdapr}/blazor.client:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Web/BlazorClient.Host/Dockerfile

  catalog-api:
    image: ${REGISTRY:-eshopdapr}/catalog.api:${TAG:-latest}
    restart: always
    network_mode: "service:catalog-api-dapr"
    build:
      context: .
      dockerfile: src/Services/Catalog/Catalog.API/Dockerfile
    depends_on:
      - sqldata

  catalog-api-dapr:
    image: "ghcr.io/dapr/dapr:1.12.3"
    command:
      - "/daprd"
      - "-app-id"
      - "catalog-api"
      - "-app-port"
      - "80"
      - "-resources-path"
      - "/components"
      - "-config"
      - "/configuration/eshop-config.yaml"
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/configuration"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy

  identity-api:
    image: ${REGISTRY:-eshopdapr}/identity.api:${TAG:-latest}
    restart: always
    network_mode: "service:identity-api-dapr"
    build:
      context: .
      dockerfile: src/Services/Identity/Identity.API/Dockerfile
    depends_on:
      - sqldata

  identity-api-dapr:
    image: "ghcr.io/dapr/dapr:1.12.3"
    restart: always
    command: 
      - "/daprd"
      - "--app-id"
      - "identity-api"
      - "--app-port"
      - "80"
      - "--placement-host-address"
      - "dapr-placement:50000"
      - "--resources-path"
      - "/components"
      - "--config"
      - "/configuration/eshop-config.yaml"
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/configuration"

  ordering-api:
    image: ${REGISTRY:-eshopdapr}/ordering.api:${TAG:-latest}
    restart: always
    network_mode: "service:ordering-api-dapr"
    build:
      context: .
      dockerfile: src/Services/Ordering/Ordering.API/Dockerfile
    depends_on:
      - sqldata

  ordering-api-dapr:
    image: "ghcr.io/dapr/dapr:1.12.3"
    restart: always
    command:
      - "/daprd"
      - "--app-id"
      - "ordering-api"
      - "--app-port"
      - "80"
      - "--log-level"
      - "debug"
      - "--placement-host-address"
      - "dapr-placement:50000"
      - "--resources-path"
      - "/components"
      - "--config"
      - "/configuration/eshop-config.yaml"
    volumes:
      - "./data:/data"
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/configuration"
    depends_on:
      rabbitmq:
        condition: service_healthy

  payment-api:
    image: ${REGISTRY:-eshopdapr}/payment.api:${TAG:-latest}
    restart: always
    network_mode: "service:payment-api-dapr"
    build:
      context: .
      dockerfile: src/Services/Payment/Payment.API/Dockerfile

  payment-api-dapr:
    image: "ghcr.io/dapr/dapr:1.12.3"
    restart: always
    command: 
      - "/daprd"
      - "--app-id"
      - "payment-api"
      - "--app-port"
      - "80"
      - "--resources-path"
      - "/components"
      - "--config"
      - "/configuration/eshop-config.yaml"
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/configuration"
    depends_on:
      rabbitmq:
        condition: service_healthy

  webshoppingagg:
    image: ${REGISTRY:-eshopdapr}/webshoppingagg:${TAG:-latest}
    restart: always
    network_mode: "service:webshoppingagg-dapr"
    build:
      context: .
      dockerfile: src/ApiGateways/Aggregators/Web.Shopping.HttpAggregator/Dockerfile
    depends_on:
      - basket-api
      - catalog-api
      - identity-api
      - ordering-api
      - sqldata

  webshoppingagg-dapr:
    image: "ghcr.io/dapr/dapr:1.12.3"
    restart: always
    command:
      - "/daprd"
      - "--app-id"
      - "webshoppingagg"
      - "--app-port"
      - "80"
      - "--resources-path"
      - "/components"
      - "--config"
      - "/configuration/eshop-config.yaml"
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/configuration"
    depends_on:
      rabbitmq:
        condition: service_healthy

  webshoppingapigw:
    image: ${REGISTRY:-eshopdapr}/webshoppingapigw:${TAG:-latest}
    restart: always
    network_mode: "service:webshoppingapigw-dapr"
    build:
      context: .
      dockerfile: src/ApiGateways/Envoy/Dockerfile

  webshoppingapigw-dapr:
    image: "ghcr.io/dapr/dapr:1.12.3"
    restart: always
    command: 
      - "/daprd"
      - "--app-id"
      - "webshoppingapigw"
      - "--app-port"
      - "80"
      - "--resources-path"
      - "/components"
      - "--config"
      - "/configuration/eshop-config.yaml"
    volumes:
      - "./dapr/components/:/components"
      - "./dapr/configuration/:/configuration"

  webstatus:
    image: ${REGISTRY:-eshopdapr}/webstatus:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Web/WebStatus/Dockerfile

  dapr-placement:
    image: "ghcr.io/dapr/dapr:1.12.3"
    restart: always
    command: 
      - "/placement"
      - "--port"
      - "50000"
      - "--log-level"
      - "debug"
    ports:
      - "50000:50000"

volumes:
  eshop-sqldata:
    external: false
  eshop-nosqldata:
    external: false
  eshop-basketdata:
    external: false
